#Created by ringoXD


#!=======[DO NOT EDIT]=======
options:
	version: 1.0.9
	cskapi: https://github.com/MCSV-Network/Core/raw/main/cskversion
#!=======[DO NOT EDIT]=======

#!TAB COMPLETE
on tab complete of "/skcore":
	set tab completions for position 1 to "purgelogs", "showlogs" and "help"
#!TAB COMPLETE

on skript load:
	send "&b=================" to console
	send "&bCore (v{@version})" to console
	send "Created by ringoXD" to console
	send "Github: &bhttps://github.com/MCSV-Network/Core" to console
	send "&b=================" to console

	#*CHECK UPDATE===
	send "[Core] Checking Updates..." to console
	set {_v} to text from url "{@hv3api}"
	if {_v} is not set:
		send "[Core] Failed to check new version! Check internet connection." to console
		stop
	if {_v} = "{@version}":
		send "[Core] No updates aviliable." to console
		delete {csk.update}
		delete {csk.latest}
	else:
		send "[Core] New version aviliable! {@version} -> %{_v}%" to console
		set {csk.update} to true
		set {csk.latest} to {_v}
		send "Download: https://github.com/MCSV-Network/Core/" to console	

#?debug log
command /skcore [<text>]:
	permission: admin
	trigger:
		if arg-1 is not set:
			send "&bCore&3.sk &7- Utility Skript Project"
			send "&7Created by ringoXD &7(<link:https://github.com/MCSV-Network/Core>&b&nGithub&7)"
			send "&7/skcore &bhelp &7to show commands."
			stop
		if arg-1 is "help":
			send "&bCore&3.sk &7- &bCommands:"
			send "&7/skcore &bpurgelogs&f: &3Purge log file."
			send "&7/skcore &bshowlog&f: &3Show logs."
			stop
		if arg-1 is "purgelogs":
			send "&7Deleting log.txt..."
			delete file "plugins/Skript/scripts/Core-sk/log.txt"
			send "&aSuccess!"
			stop
		if arg-1 is "showlogs":
			set {_path} to "plugins/Skript/scripts/Core-sk/log.txt"
			set {_l} to line count of file {_path}
			send "&7Core.sk debug function logs(%{_l}%lines):"
			set {_n} to 1
			loop {_l} times:
				set {_x} to line {_n} in file {_path}
				send "&7%{_x}%"
				add 1 to {_n}
				wait a tick
			send "&7END"
			stop
		else:
			send "&cUnknown command."

#*Debug log function (plugins/Skript/scripts/Core-sk/log.txt)
function debug(p: player, t: text, m: text = "info"):
	if file "plugins/Skript/scripts/Core-sk/log.txt" doesn't exist:
		send "[!] log.txt does not exist!!" to console
		send "Generating log.txt..." to console
		create file "plugins/Skript/scripts/Core-sk/log.txt"
		write "=============================================================================" at line (file "plugins/Skript/scripts/Core-sk/log.txt"'s line count + 1) to file "plugins/Skript/scripts/Core-sk/log.txt"
		write "Core.sk - log file" at line (file "plugins/Skript/scripts/Core-sk/log.txt"'s line count + 1) to file "plugins/Skript/scripts/Core-sk/log.txt"
		write "When the debug function is executed, it is written to this file as a log." at line (file "plugins/Skript/scripts/Core-sk/log.txt"'s line count + 1) to file "plugins/Skript/scripts/Core-sk/log.txt"
		write "=============================================================================" at line (file "plugins/Skript/scripts/Core-sk/log.txt"'s line count + 1) to file "plugins/Skript/scripts/Core-sk/log.txt"
		write "" at line (file "plugins/Skript/scripts/Core-sk/log.txt"'s line count + 1) to file "plugins/Skript/scripts/Core-sk/log.txt"
		send "Success!" to console
	#*INFO
	if {_m} is "info":
		send "&7[debug-info] %{_t}%" to {_p}
		write "[%now% DEBUG-INFO - %{_p}%] %{_t}%" at line (file "plugins/Skript/scripts/Core-sk/log.txt"'s line count + 1) to file "plugins/Skript/scripts/Core-sk/log.txt"
	if {_m} is "info-red":
		send "&7[debug-info] &c%{_t}%" to {_p}
		write "[%now% DEBUG-INFO - %{_p}%] %{_t}%" at line (file "plugins/Skript/scripts/Core-sk/log.txt"'s line count + 1) to file "plugins/Skript/scripts/Core-sk/log.txt"
	if {_m} is "info-blue":
		send "&7[debug-info] &b%{_t}%" to {_p}
		write "[%now% DEBUG-INFO - %{_p}%] %{_t}%" at line (file "plugins/Skript/scripts/Core-sk/log.txt"'s line count + 1) to file "plugins/Skript/scripts/Core-sk/log.txt"
	if {_m} is "info-green":
		send "&7[debug-info] &a%{_t}%" to {_p}
		write "[%now% DEBUG-INFO - %{_p}%] %{_t}%" at line (file "plugins/Skript/scripts/Core-sk/log.txt"'s line count + 1) to file "plugins/Skript/scripts/Core-sk/log.txt"
	#*WARN
	if {_m} is "warn":
		send "&7[debug-warn] &e%{_t}%" to {_p}
		write "[%now% DEBUG-WARN - %{_p}%] %{_t}%" at line (file "plugins/Skript/scripts/Core-sk/log.txt"'s line count + 1) to file "plugins/Skript/scripts/Core-sk/log.txt"
	#*ERR
	if {_m} is "error":
		send "&e[debug-error] &c%{_t}%" to {_p}
		write "[%now% DEBUG-ERROR - %{_p}%] %{_t}%" at line (file "plugins/Skript/scripts/Core-sk/log.txt"'s line count + 1) to file "plugins/Skript/scripts/Core-sk/log.txt"
	#*CRIT
	if {_m} is "crit":	
		send "&c[debug-crit] &c&l%{_t}%" to {_p}
		write "[%now% DEBUG-CRIT - %{_p}%] %{_t}%" at line (file "plugins/Skript/scripts/Core-sk/log.txt"'s line count + 1) to file "plugins/Skript/scripts/Core-sk/log.txt"

#?debug for console
function debugforconsole(t: text, m: text = "info"):
	if file "plugins/Skript/scripts/Core-sk/log.txt" doesn't exist:
		send "[!] log.txt does not exist!!" to console
		send "Generating log.txt..." to console
		create file "plugins/Skript/scripts/Core-sk/log.txt"
		write "=============================================================================" at line (file "plugins/Skript/scripts/Core-sk/log.txt"'s line count + 1) to file "plugins/Skript/scripts/Core-sk/log.txt"
		write "Core.sk - log file" at line (file "plugins/Skript/scripts/Core-sk/log.txt"'s line count + 1) to file "plugins/Skript/scripts/Core-sk/log.txt"
		write "When the debug function is executed, it is written to this file as a log." at line (file "plugins/Skript/scripts/Core-sk/log.txt"'s line count + 1) to file "plugins/Skript/scripts/Core-sk/log.txt"
		write "=============================================================================" at line (file "plugins/Skript/scripts/Core-sk/log.txt"'s line count + 1) to file "plugins/Skript/scripts/Core-sk/log.txt"
		write "" at line (file "plugins/Skript/scripts/Core-sk/log.txt"'s line count + 1) to file "plugins/Skript/scripts/Core-sk/log.txt"
		send "Success!" to console
	#*INFO
	if {_m} is "info":
		send "&7[debug-info] %{_t}%" to console
		write "[%now% DEBUG-INFO - CONSOLE] %{_t}%" at line (file "plugins/Skript/scripts/Core-sk/log.txt"'s line count + 1) to file "plugins/Skript/scripts/Core-sk/log.txt"
	#*WARN
	if {_m} is "warn":
		send "&7[debug-warn] &e%{_t}%" to console
		write "[%now% DEBUG-WARN - CONSOLE] %{_t}%" at line (file "plugins/Skript/scripts/Core-sk/log.txt"'s line count + 1) to file "plugins/Skript/scripts/Core-sk/log.txt"
	#*ERR
	if {_m} is "error":
		send "&e[debug-error] &c%{_t}%" to console
		write "[%now% DEBUG-ERROR - CONSOLE] %{_t}%" at line (file "plugins/Skript/scripts/Core-sk/log.txt"'s line count + 1) to file "plugins/Skript/scripts/Core-sk/log.txt"
	#*CRIT
	if {_m} is "crit":	
		send "&c[debug-crit] &c&l%{_t}%" to console
		write "[%now% DEBUG-CRIT - CONSOLE] %{_t}%" at line (file "plugins/Skript/scripts/Core-sk/log.txt"'s line count + 1) to file "plugins/Skript/scripts/Core-sk/log.txt"


#*Better Randomnum generator(l is length)
#!This isn't parsed as number.
function randomnumgen(l: number) :: text:
	set {_num} to ""
	loop {_l} times:
		set {_x} to random integer between 0 and 9
		set {_num} to "%{_num}%%{_x}%"
	return {_num}

#*Notification function
function notification(p: player, t: text):
	set {_t2} to {_t}
	add {_t2} to {notify.%{_p}%::*}
	set {_notify} to join {notify.%{_p}%::*} by " &7|&r "
	set action bar of {_p} to "%{_notify}%"
	debugforconsole("notify list: %{notify.%{_p}%::*}%")
	notificationTimer({_p}, {_t2})
#*Notification Timer
function notificationTimer(p: player, x: text):
	wait 5 seconds
	remove {_x} from {notify.%{_p}%::*}
#*For Notification test
command /skcorenotify [<text>]:
	permission: admin
	trigger:
		set {_x} to arg-1
		notification(player, {_x})
		send "Success (%{_x}%)"

#*time, but it's japanese
#*Sorry, I can't make return function (skill issue)
function japanesetimespan(p: player, time: timespan):
	set {_x} to "%{_time}%"
	debug({_p}, "set %{_x}%")
	replace all " seconds" or " second" with "秒" in {_x}
	replace all " minutes" or " minute" with "分" in {_x}
	replace all " hours" or " hour" with "時間" in {_x}
	replace all " days" or " day" with "日" in {_x}
	replace all "and" with "" in {_x}
	set {_x2} to "%{_x}%"
	debug({_p}, "result: %{_x2}%")
	set {jts_result.%{_p}%} to {_x2}